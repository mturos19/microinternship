---
title: "Test"
format:
    html:
        code-fold: true
jupyter: python3
---


```{python}
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import linregress
import seaborn  as sns 
import statistics
import scipy
from scipy import stats
import matplotlib.pyplot as plt


df = pd.read_csv('gdp_csv.csv')


countries_list=['United Kingdom', 'Italy', 'France', 'Germany']


import plotly.express as px

df_map=df 
def map_gdp():
    fig = px.choropleth(df_map, locations="Country Name",
                        color="Value", 
                        locationmode='country names',
                        color_continuous_scale=px.colors.sequential.Plasma,
                        animation_frame="Year",
                        title="GDP Map",
                        range_color=(0, 3.5E12))
    fig.show()
map_gdp()


import plotly.graph_objects as go

def plot_gdp_interactive(countries):
    filtered_df = df[df['Country Name'].isin(countries)]
    fig = go.Figure()

    for country in filtered_df['Country Name'].unique():
        country_df = filtered_df[filtered_df['Country Name'] == country]
        fig.add_trace(go.Scatter(
            x=country_df['Year'],
            y=country_df['Value'],
            mode='lines',
            name=country
        ))

    fig.update_layout(
        xaxis=dict(title='Year'),
        yaxis=dict(title='GDP'),
        title='GDP Comparison',
        showlegend=True
    )
    fig.show()
plot_gdp_interactive(countries_list)

def barchart_interactive(countries):
    filtered_df = df[df['Country Name'].isin(countries)]
    for country in filtered_df['Country Name'].unique():
        fig = px.bar(
        data_frame = filtered_df,
        y='Value',
        color='Year',  
        color_continuous_scale="Viridis",  
        labels={"x": "Countries", "y": "GDP"},
        title="GDP of the 4 Countries",
        )
        
    fig.show()
barchart_interactive(countries_list)


from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

def linear_reg_uk(df):
    uk = df[df['Country Name']=='United Kingdom']
    x = np.array(uk['Year']).reshape(-1, 1)
    y = np.array(uk['Value']).reshape(-1, 1)

    sns.lmplot(x ="Year", y ="Value", data = uk, order = 2, ci = None)
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.70)

    regr = LinearRegression()
    
    regr.fit(x_train, y_train)


    # Data scatter of predicted values
    y_pred = regr.predict(x_test)
    plt.scatter(x_test, y_test, color ='b')
    plt.plot(x_test, y_pred, color ='k')
    plt.title("Linear Regression of UK's GDP")

    plt.show()

linear_reg_uk(df)
```

```{python}
import numpy as np
from bokeh.io import curdoc
from bokeh.layouts import column, row
from bokeh.models import ColumnDataSource, Slider, TextInput, CustomJS
from bokeh.plotting import figure, show
from bokeh.io import output_notebook

x = np.linspace(0, 10, 500)
y = np.sin(x)

source = ColumnDataSource(data=dict(x=x, y=y))

plot = figure(y_range=(-10, 10), width=400, height=400)

plot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)

amp = Slider(start=0.1, end=10, value=1, step=.1, title="Amplitude")
freq = Slider(start=0.1, end=10, value=1, step=.1, title="Frequency")
phase = Slider(start=-6.4, end=6.4, value=0, step=.1, title="Phase")
offset = Slider(start=-9, end=9, value=0, step=.1, title="Offset")

callback = CustomJS(args=dict(source=source, amp=amp, freq=freq, phase=phase, offset=offset),
                    code="""
    const A = amp.value
    const k = freq.value
    const phi = phase.value
    const B = offset.value

    const x = source.data.x
    const y = Array.from(x, (x) => B + A*Math.sin(k*x+phi))
    source.data = { x, y }
""")

amp.js_on_change('value', callback)
freq.js_on_change('value', callback)
phase.js_on_change('value', callback)
offset.js_on_change('value', callback)
output_notebook()
show(row(plot, column(amp, freq, phase, offset)))

from bokeh.layouts import gridplot
from bokeh.models import CDSView, ColumnDataSource, IndexFilter
from bokeh.plotting import figure, show
from bokeh.io import output_notebook

# create ColumnDataSource from a dict
source = ColumnDataSource(data=dict(x=[1, 2, 3, 4, 5], y=[1, 2, 3, 4, 5]))

# create a view using an IndexFilter with the index positions [0, 2, 4]
view = CDSView(filter=IndexFilter([0, 2, 4]))

# setup tools
tools = ["pan", "hover", "reset", "wheel_zoom"]

# create a first plot with all data in the ColumnDataSource
p = figure(height=300, width=300, tools=tools)
p.circle(x="x", y="y", size=10, hover_color="red", source=source)

# create a second plot with a subset of ColumnDataSource, based on view
p_filtered = figure(height=300, width=300, tools=tools)
p_filtered.circle(x="x", y="y", size=10, hover_color="red", source=source, view=view)

# show both plots next to each other in a gridplot layout
output_notebook()
show(gridplot([[p, p_filtered]]))




```